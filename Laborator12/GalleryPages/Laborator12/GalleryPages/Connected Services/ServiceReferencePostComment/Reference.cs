//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReferencePostComment
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferencePostComment.Interface1")]
    public interface Interface1
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Interface1/Insert", ReplyAction="http://tempuri.org/Interface1/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(string name, double size, string path, string format, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Interface1/Delete", ReplyAction="http://tempuri.org/Interface1/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(string par);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Interface1/newCol", ReplyAction="http://tempuri.org/Interface1/newColResponse")]
        System.Threading.Tasks.Task newColAsync(string par);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Interface1/deleteCol", ReplyAction="http://tempuri.org/Interface1/deleteColResponse")]
        System.Threading.Tasks.Task deleteColAsync(string par);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Interface1/Update", ReplyAction="http://tempuri.org/Interface1/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(string path, string column, string value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface Interface1Channel : ServiceReferencePostComment.Interface1, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class Interface1Client : System.ServiceModel.ClientBase<ServiceReferencePostComment.Interface1>, ServiceReferencePostComment.Interface1
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Interface1Client() : 
                base(Interface1Client.GetDefaultBinding(), Interface1Client.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_Interface1.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Interface1Client(EndpointConfiguration endpointConfiguration) : 
                base(Interface1Client.GetBindingForEndpoint(endpointConfiguration), Interface1Client.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Interface1Client(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Interface1Client.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Interface1Client(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Interface1Client.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Interface1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task InsertAsync(string name, double size, string path, string format, System.DateTime date)
        {
            return base.Channel.InsertAsync(name, size, path, format, date);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(string par)
        {
            return base.Channel.DeleteAsync(par);
        }
        
        public System.Threading.Tasks.Task newColAsync(string par)
        {
            return base.Channel.newColAsync(par);
        }
        
        public System.Threading.Tasks.Task deleteColAsync(string par)
        {
            return base.Channel.deleteColAsync(par);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(string path, string column, string value)
        {
            return base.Channel.UpdateAsync(path, column, value);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_Interface1))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_Interface1))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return Interface1Client.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_Interface1);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return Interface1Client.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_Interface1);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_Interface1,
        }
    }
}
